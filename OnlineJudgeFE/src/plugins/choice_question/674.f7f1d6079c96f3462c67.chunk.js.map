{"version":3,"file":"674.f7f1d6079c96f3462c67.chunk.js","mappings":"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","sources":["webpack://ChoiceQuestionPlugin/./store/index.js","webpack://ChoiceQuestionPlugin/./api/index.js"],"sourcesContent":["// 选择题模块 Vuex Store\n\nimport api from '../api'\n\nconst state = {\n  // 选择题相关状态\n  questions: [],\n  currentQuestion: null,\n  categories: [],\n  tags: [],\n  submissions: [],\n  wrongQuestions: [],\n  stats: null,\n  \n  // 分页和筛选状态\n  pagination: {\n    page: 1,\n    limit: 20,\n    total: 0\n  },\n  filters: {\n    keyword: '',\n    category: null,\n    tags: [],\n    difficulty: null,\n    questionType: null\n  },\n  \n  // 加载状态\n  loading: {\n    questions: false,\n    categories: false,\n    tags: false,\n    submissions: false,\n    wrongQuestions: false,\n    stats: false\n  }\n}\n\nconst mutations = {\n  // 设置题目列表\n  SET_QUESTIONS(state, { data, total }) {\n    state.questions = data\n    state.pagination.total = total\n  },\n  \n  // 设置当前题目\n  SET_CURRENT_QUESTION(state, question) {\n    state.currentQuestion = question\n  },\n  \n  // 设置分类列表\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories\n  },\n  \n  // 设置标签列表\n  SET_TAGS(state, tags) {\n    state.tags = tags\n  },\n  \n  // 设置提交记录\n  SET_SUBMISSIONS(state, { data, total }) {\n    state.submissions = data\n    state.pagination.total = total\n  },\n  \n  // 设置错题列表\n  SET_WRONG_QUESTIONS(state, { data, total }) {\n    state.wrongQuestions = data\n    state.pagination.total = total\n  },\n  \n  // 设置统计信息\n  SET_STATS(state, stats) {\n    state.stats = stats\n  },\n  \n  // 更新分页信息\n  UPDATE_PAGINATION(state, pagination) {\n    state.pagination = { ...state.pagination, ...pagination }\n  },\n  \n  // 更新筛选条件\n  UPDATE_FILTERS(state, filters) {\n    state.filters = { ...state.filters, ...filters }\n  },\n  \n  // 设置加载状态\n  SET_LOADING(state, { type, loading }) {\n    state.loading[type] = loading\n  }\n}\n\nconst actions = {\n  // 获取题目列表\n  async getQuestions({ commit, state }) {\n    commit('SET_LOADING', { type: 'questions', loading: true })\n    try {\n      const params = {\n        page: state.pagination.page,\n        limit: state.pagination.limit,\n        ...state.filters\n      }\n      const response = await api.getQuestions(params)\n      commit('SET_QUESTIONS', response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'questions', loading: false })\n    }\n  },\n  \n  // 获取题目详情\n  async getQuestionDetail({ commit }, id) {\n    const response = await api.getQuestionDetail(id)\n    commit('SET_CURRENT_QUESTION', response.data)\n    return response\n  },\n  \n  // 获取分类列表\n  async getCategories({ commit }) {\n    commit('SET_LOADING', { type: 'categories', loading: true })\n    try {\n      const response = await api.getCategories()\n      commit('SET_CATEGORIES', response.data.results || response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'categories', loading: false })\n    }\n  },\n  \n  // 获取标签列表\n  async getTags({ commit }) {\n    commit('SET_LOADING', { type: 'tags', loading: true })\n    try {\n      const response = await api.getTags()\n      commit('SET_TAGS', response.data.results || response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'tags', loading: false })\n    }\n  },\n  \n  // 提交答案\n  async submitAnswer({ dispatch }, { questionId, selectedAnswer }) {\n    const response = await api.submitAnswer({ questionId, selectedAnswer })\n    // 提交后重新获取题目详情以更新状态\n    await dispatch('getQuestionDetail', questionId)\n    return response\n  },\n  \n  // 获取提交记录\n  async getSubmissions({ commit, state }) {\n    commit('SET_LOADING', { type: 'submissions', loading: true })\n    try {\n      const params = {\n        page: state.pagination.page,\n        limit: state.pagination.limit\n      }\n      const response = await api.getSubmissions(params)\n      commit('SET_SUBMISSIONS', response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'submissions', loading: false })\n    }\n  },\n  \n  // 获取错题列表\n  async getWrongQuestions({ commit, state }) {\n    commit('SET_LOADING', { type: 'wrongQuestions', loading: true })\n    try {\n      const params = {\n        page: state.pagination.page,\n        limit: state.pagination.limit,\n        ...state.filters\n      }\n      const response = await api.getWrongQuestions(params)\n      commit('SET_WRONG_QUESTIONS', response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'wrongQuestions', loading: false })\n    }\n  },\n  \n  // 添加错题\n  async addWrongQuestion({ dispatch }, questionId) {\n    const response = await api.addWrongQuestion({ questionId })\n    // 添加后重新获取错题列表\n    await dispatch('getWrongQuestions')\n    return response\n  },\n  \n  // 移除错题\n  async removeWrongQuestion({ dispatch }, id) {\n    const response = await api.removeWrongQuestion(id)\n    // 移除后重新获取错题列表\n    await dispatch('getWrongQuestions')\n    return response\n  },\n  \n  // 获取统计信息\n  async getStats({ commit }) {\n    commit('SET_LOADING', { type: 'stats', loading: true })\n    try {\n      const response = await api.getStats()\n      commit('SET_STATS', response.data)\n      return response\n    } finally {\n      commit('SET_LOADING', { type: 'stats', loading: false })\n    }\n  },\n  \n  // 更新分页\n  updatePagination({ commit }, pagination) {\n    commit('UPDATE_PAGINATION', pagination)\n  },\n  \n  // 更新筛选条件\n  updateFilters({ commit }, filters) {\n    commit('UPDATE_FILTERS', filters)\n  },\n  \n  // 重置筛选条件\n  resetFilters({ commit }) {\n    commit('UPDATE_FILTERS', {\n      keyword: '',\n      category: null,\n      tags: [],\n      difficulty: null,\n      questionType: null\n    })\n  }\n}\n\nconst getters = {\n  // 获取当前页题目列表\n  currentQuestions: state => state.questions,\n  \n  // 获取当前题目\n  currentQuestion: state => state.currentQuestion,\n  \n  // 获取分类选项\n  categoryOptions: state => state.categories.map(cat => ({\n    label: cat.name,\n    value: cat.id\n  })),\n  \n  // 获取标签选项\n  tagOptions: state => state.tags.map(tag => ({\n    label: tag.name,\n    value: tag.id,\n    color: tag.color\n  })),\n  \n  // 获取加载状态\n  isLoading: state => type => state.loading[type] || false,\n  \n  // 获取分页信息\n  pagination: state => state.pagination,\n  \n  // 获取筛选条件\n  filters: state => state.filters\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n}","// 简单的ajax函数，用于插件环境\nconst ajax = (url, method = 'get', options = {}) => {\n  const baseURL = '/api/'\n  const fullURL = baseURL + url\n  \n  const config = {\n    method: method.toUpperCase(),\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]')?.value || ''\n    }\n  }\n  \n  if (options.params) {\n    const searchParams = new URLSearchParams(options.params)\n    const separator = fullURL.includes('?') ? '&' : '?'\n    config.url = fullURL + separator + searchParams.toString()\n  } else {\n    config.url = fullURL\n  }\n  \n  if (options.data && ['POST', 'PUT', 'PATCH'].includes(config.method)) {\n    config.body = JSON.stringify(options.data)\n  }\n  \n  return fetch(config.url, config).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    return response.json().then(data => ({ data }))\n  })\n}\n\nexport default {\n  // 分类相关API\n  getCategoryList() {\n    return ajax('plugin/choice/categories/', 'get')\n  },\n  createCategory(data) {\n    return ajax('plugin/choice/categories/', 'post', {\n      data\n    })\n  },\n  updateCategory(id, data) {\n    return ajax(`plugin/choice/categories/${id}/`, 'put', {\n      data\n    })\n  },\n  deleteCategory(id) {\n    return ajax(`plugin/choice/categories/${id}/`, 'delete')\n  },\n\n  // 标签相关API\n  getTagList() {\n    return ajax('plugin/choice/tags/', 'get')\n  },\n  createTag(data) {\n    return ajax('plugin/choice/tags/', 'post', {\n      data\n    })\n  },\n  updateTag(id, data) {\n    return ajax(`plugin/choice/tags/${id}/`, 'put', {\n      data\n    })\n  },\n  deleteTag(id) {\n    return ajax(`plugin/choice/tags/${id}/`, 'delete')\n  },\n\n  // 选择题相关API\n  getQuestionList(params) {\n    return ajax('plugin/choice/questions/', 'get', {\n      params\n    })\n  },\n  getQuestionDetail(id) {\n    return ajax(`plugin/choice/questions/${id}/`, 'get')\n  },\n  createQuestion(data) {\n    return ajax('plugin/choice/questions/', 'post', {\n      data\n    })\n  },\n  updateQuestion(id, data) {\n    return ajax(`plugin/choice/questions/${id}/`, 'put', {\n      data\n    })\n  },\n  deleteQuestion(id) {\n    return ajax(`plugin/choice/questions/${id}/`, 'delete')\n  },\n\n  // 提交相关API\n  submitAnswer(data) {\n    return ajax('plugin/choice/submissions/', 'post', {\n      data\n    })\n  },\n  getSubmissionList(params) {\n    return ajax('plugin/choice/submissions/', 'get', {\n      params\n    })\n  },\n\n  // 错题本相关API\n  getWrongQuestionList(params) {\n    return ajax('plugin/choice/wrong-questions/', 'get', {\n      params\n    })\n  },\n  addToWrongQuestions(data) {\n    return ajax('plugin/choice/wrong-questions/', 'post', {\n      data\n    })\n  },\n  removeFromWrongQuestions(id) {\n    return ajax(`plugin/choice/wrong-questions/${id}/`, 'delete')\n  },\n  updateWrongQuestionNote(id, data) {\n    return ajax(`plugin/choice/wrong-questions/${id}/`, 'put', {\n      data\n    })\n  },\n\n  // 统计相关API\n  getQuestionStats() {\n    return ajax('plugin/choice/statistics/', 'get')\n  },\n\n  // 导入导出相关API\n  importQuestions(formData) {\n    return ajax('plugin/choice/import/', 'post', {\n      data: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n  },\n  exportQuestions(params) {\n    return ajax('plugin/choice/export/', 'get', {\n      params,\n      responseType: 'blob'\n    })\n  },\n  downloadTemplate(format) {\n    return ajax('plugin/choice/template/', 'get', {\n      params: { format },\n      responseType: 'blob'\n    })\n  },\n  batchOperation(data) {\n    return ajax('plugin/choice/batch/', 'post', {\n      data\n    })\n  },\n  getImportHistory(params) {\n    return ajax('plugin/choice/import-history/', 'get', {\n      params\n    })\n  }\n}"],"names":["mutations","SET_QUESTIONS","state","data","total","questions","pagination","SET_CURRENT_QUESTION","question","currentQuestion","SET_CATEGORIES","categories","SET_TAGS","tags","SET_SUBMISSIONS","submissions","SET_WRONG_QUESTIONS","wrongQuestions","SET_STATS","stats","UPDATE_PAGINATION","UPDATE_FILTERS","filters","SET_LOADING","type","loading","actions","getQuestions","commit","params","page","limit","response","api","getQuestionDetail","id","getCategories","results","getTags","submitAnswer","dispatch","questionId","selectedAnswer","getSubmissions","getWrongQuestions","addWrongQuestion","removeWrongQuestion","getStats","updatePagination","updateFilters","resetFilters","keyword","category","difficulty","questionType","namespaced","getters","currentQuestions","categoryOptions","map","cat","label","name","value","tagOptions","tag","color","isLoading","ajax","url","method","options","fullURL","config","toUpperCase","headers","document","querySelector","searchParams","URLSearchParams","separator","includes","toString","body","JSON","stringify","fetch","then","ok","Error","status","json","getCategoryList","createCategory","updateCategory","deleteCategory","getTagList","createTag","updateTag","deleteTag","getQuestionList","createQuestion","updateQuestion","deleteQuestion","getSubmissionList","getWrongQuestionList","addToWrongQuestions","removeFromWrongQuestions","updateWrongQuestionNote","getQuestionStats","importQuestions","formData","exportQuestions","responseType","downloadTemplate","format","batchOperation","getImportHistory"],"sourceRoot":""}