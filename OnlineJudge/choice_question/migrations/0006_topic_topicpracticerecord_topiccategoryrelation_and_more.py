# Generated by Django 4.2.23 on 2025-09-06 04:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('choice_question', '0005_exampaper_paper_type_exampaperquestion'),
    ]

    operations = [
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('title', models.CharField(help_text='专题的标题', max_length=200, verbose_name='专题标题')),
                ('description', models.TextField(help_text='专题的详细描述', verbose_name='专题描述')),
                ('difficulty_level', models.IntegerField(choices=[(1, '简单'), (2, '中等'), (3, '困难'), (4, '专家'), (5, '大师')], default=1, help_text='专题的难度等级', verbose_name='难度等级')),
                ('cover_image', models.URLField(blank=True, help_text='专题封面图片URL', null=True, verbose_name='封面图片')),
                ('is_public', models.BooleanField(default=True, help_text='是否对所有用户公开', verbose_name='是否公开')),
                ('is_active', models.BooleanField(default=True, help_text='是否启用此专题', verbose_name='是否启用')),
                ('pass_score', models.IntegerField(default=60, help_text='专题的及格分数（0-100）', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='及格分数')),
                ('total_questions', models.IntegerField(default=0, help_text='专题包含的题目总数', verbose_name='题目总数')),
                ('created_by', models.ForeignKey(help_text='专题的创建者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '专题',
                'verbose_name_plural': '专题',
                'db_table': 'choice_question_topic',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='TopicPracticeRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('status', models.CharField(choices=[('in_progress', '进行中'), ('completed', '已完成'), ('paused', '已暂停')], default='in_progress', max_length=20, verbose_name='练习状态')),
                ('total_questions', models.IntegerField(default=0, verbose_name='题目总数')),
                ('answered_questions', models.IntegerField(default=0, verbose_name='已答题数')),
                ('correct_answers', models.IntegerField(default=0, verbose_name='正确答案数')),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='得分')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('time_spent', models.IntegerField(default=0, verbose_name='用时（秒）')),
                ('topic', models.ForeignKey(help_text='练习的专题', on_delete=django.db.models.deletion.CASCADE, to='choice_question.topic', verbose_name='专题')),
                ('user', models.ForeignKey(help_text='练习的用户', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '专题练习记录',
                'verbose_name_plural': '专题练习记录',
                'db_table': 'choice_question_topic_practice',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TopicCategoryRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_categories', to='choice_question.category', verbose_name='分类')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_categories', to='choice_question.topic', verbose_name='专题')),
            ],
            options={
                'verbose_name': '专题分类关联',
                'verbose_name_plural': '专题分类关联',
                'db_table': 'choice_question_topic_category',
            },
        ),
        migrations.CreateModel(
            name='TopicWrongQuestionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('user_answer', models.CharField(max_length=10, verbose_name='用户答案')),
                ('correct_answer', models.CharField(max_length=10, verbose_name='正确答案')),
                ('is_reviewed', models.BooleanField(default=False, verbose_name='是否已复习')),
                ('review_time', models.DateTimeField(blank=True, null=True, verbose_name='复习时间')),
                ('practice_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='choice_question.topicpracticerecord', verbose_name='练习记录')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='choice_question.choicequestion', verbose_name='题目')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='choice_question.topic', verbose_name='专题')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '专题错题记录',
                'verbose_name_plural': '专题错题记录',
                'db_table': 'choice_question_topic_wrong',
                'ordering': ['-create_time'],
                'indexes': [models.Index(fields=['user', 'topic'], name='choice_ques_user_id_602178_idx'), models.Index(fields=['question'], name='choice_ques_questio_ea0f1a_idx'), models.Index(fields=['is_reviewed'], name='choice_ques_is_revi_f65fd7_idx')],
                'unique_together': {('user', 'topic', 'question', 'practice_record')},
            },
        ),
        migrations.CreateModel(
            name='TopicTagRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_tags', to='choice_question.questiontag', verbose_name='标签')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_tags', to='choice_question.topic', verbose_name='专题')),
            ],
            options={
                'verbose_name': '专题标签关联',
                'verbose_name_plural': '专题标签关联',
                'db_table': 'choice_question_topic_tag',
                'indexes': [models.Index(fields=['topic'], name='choice_ques_topic_i_df6b17_idx'), models.Index(fields=['tag'], name='choice_ques_tag_id_8c965e_idx')],
                'unique_together': {('topic', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TopicQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_update_time', models.DateTimeField(auto_now=True, verbose_name='最后更新时间')),
                ('plugin_version', models.CharField(default='1.0.0', max_length=20, verbose_name='插件版本')),
                ('order_index', models.IntegerField(default=0, help_text='题目在专题中的排序', verbose_name='排序索引')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_questions', to='choice_question.choicequestion', verbose_name='题目')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_questions', to='choice_question.topic', verbose_name='专题')),
            ],
            options={
                'verbose_name': '专题题目关联',
                'verbose_name_plural': '专题题目关联',
                'db_table': 'choice_question_topic_question',
                'ordering': ['order_index'],
                'indexes': [models.Index(fields=['topic', 'order_index'], name='choice_ques_topic_i_f4ea13_idx'), models.Index(fields=['question'], name='choice_ques_questio_c791e9_idx')],
                'unique_together': {('topic', 'question')},
            },
        ),
        migrations.AddIndex(
            model_name='topicpracticerecord',
            index=models.Index(fields=['user', 'topic'], name='choice_ques_user_id_68350a_idx'),
        ),
        migrations.AddIndex(
            model_name='topicpracticerecord',
            index=models.Index(fields=['status'], name='choice_ques_status_d26462_idx'),
        ),
        migrations.AddIndex(
            model_name='topicpracticerecord',
            index=models.Index(fields=['start_time'], name='choice_ques_start_t_961433_idx'),
        ),
        migrations.AddIndex(
            model_name='topiccategoryrelation',
            index=models.Index(fields=['topic'], name='choice_ques_topic_i_81efeb_idx'),
        ),
        migrations.AddIndex(
            model_name='topiccategoryrelation',
            index=models.Index(fields=['category'], name='choice_ques_categor_114b2d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topiccategoryrelation',
            unique_together={('topic', 'category')},
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['is_active', 'is_public'], name='choice_ques_is_acti_a289c7_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['difficulty_level'], name='choice_ques_difficu_3af9ba_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['created_by'], name='choice_ques_created_a659fd_idx'),
        ),
    ]
