<!-- OnlineJudgeFE/src/pages/admin/views/choice_question/CategoryManagement.vue -->

<template>
  <div class="category-management">
    <Panel title="选择题分类管理">
      <div slot="header">
        <el-button type="primary" size="small" @click="showCreateDialog" icon="el-icon-plus">
          添加分类
        </el-button>
      </div>
      
      <div class="category-tree-container">
        <el-row :gutter="20">
          <!-- 左侧：分类树 -->
          <el-col :span="12">
            <el-card>
              <div slot="header" class="clearfix">
                <span>分类结构</span>
                <el-button 
                  style="float: right; padding: 3px 0" 
                  type="text"
                  @click="refreshCategories">
                  <i class="el-icon-refresh"></i> 刷新
                </el-button>
              </div>
              
              <el-tree
                :data="categoryTree"
                :props="treeProps"
                node-key="id"
                default-expand-all
                :expand-on-click-node="false"
                highlight-current
                @node-click="handleNodeClick"
                draggable
                @node-drop="handleNodeDrop"
                :allow-drop="allowDrop">
                <span class="custom-tree-node" slot-scope="{ node, data }">
                  <span class="node-label">
                    <i :class="data.is_enabled ? 'el-icon-folder-opened' : 'el-icon-folder'" />
                    {{ data.name }}
                    <el-tag size="mini" type="info">{{ data.question_count || 0 }}题</el-tag>
                  </span>
                  <span class="node-actions">
                    <el-button 
                      type="text" 
                      size="mini" 
                      @click.stop="showEditDialog(data)">
                      编辑
                    </el-button>
                    <el-button 
                      type="text" 
                      size="mini" 
                      @click.stop="toggleEnabled(data)">
                      {{ data.is_enabled ? '禁用' : '启用' }}
                    </el-button>
                    <el-button 
                      type="text" 
                      size="mini" 
                      style="color: #F56C6C"
                      @click.stop="deleteCategory(data)">
                      删除
                    </el-button>
                  </span>
                </span>
              </el-tree>
            </el-card>
          </el-col>
          
          <!-- 右侧：详情展示 -->
          <el-col :span="12">
            <el-card v-if="selectedCategory">
              <div slot="header">
                <span>分类详情</span>
              </div>
              
              <el-descriptions :column="1" border>
                <el-descriptions-item label="分类名称">
                  {{ selectedCategory.name }}
                </el-descriptions-item>
                <el-descriptions-item label="分类描述">
                  {{ selectedCategory.description || '暂无描述' }}
                </el-descriptions-item>
                <el-descriptions-item label="父级分类">
                  {{ getParentName(selectedCategory.parent) || '顶级分类' }}
                </el-descriptions-item>
                <el-descriptions-item label="排序值">
                  {{ selectedCategory.order }}
                </el-descriptions-item>
                <el-descriptions-item label="状态">
                  <el-tag :type="selectedCategory.is_enabled ? 'success' : 'danger'">
                    {{ selectedCategory.is_enabled ? '启用' : '禁用' }}
                  </el-tag>
                </el-descriptions-item>
                <el-descriptions-item label="题目数量">
                  {{ selectedCategory.question_count || 0 }}
                </el-descriptions-item>
                <el-descriptions-item label="创建时间">
                  {{ selectedCategory.created_time | localtime }}
                </el-descriptions-item>
              </el-descriptions>
              
              <!-- 关联题目列表 -->
              <div class="related-questions" v-if="selectedCategory.question_count > 0">
                <h4>关联题目</h4>
                <el-button size="small" @click="showRelatedQuestions">
                  查看关联的 {{ selectedCategory.question_count }} 道题目
                </el-button>
              </div>
            </el-card>
            
            <el-empty v-else description="请选择一个分类查看详情"></el-empty>
          </el-col>
        </el-row>
      </div>
    </Panel>
    
    <!-- 创建/编辑对话框 -->
    <el-dialog 
      :title="dialogTitle" 
      :visible.sync="dialogVisible"
      width="500px"
      @close="resetForm">
      <el-form :model="categoryForm" :rules="rules" ref="categoryForm" label-width="100px">
        <el-form-item label="分类名称" prop="name">
          <el-input v-model="categoryForm.name" placeholder="请输入分类名称"></el-input>
        </el-form-item>
        
        <el-form-item label="父级分类">
          <el-cascader
            v-model="categoryForm.parent"
            :options="parentOptions"
            :props="cascaderProps"
            clearable
            placeholder="不选择则为顶级分类"
            style="width: 100%">
          </el-cascader>
        </el-form-item>
        
        <el-form-item label="分类描述">
          <el-input 
            type="textarea" 
            v-model="categoryForm.description" 
            :rows="3"
            placeholder="请输入分类描述">
          </el-input>
        </el-form-item>
        
        <el-form-item label="排序值">
          <el-input-number 
            v-model="categoryForm.order" 
            :min="0" 
            :max="999"
            style="width: 100%">
          </el-input-number>
        </el-form-item>
        
        <el-form-item label="是否启用">
          <el-switch v-model="categoryForm.is_enabled"></el-switch>
        </el-form-item>
      </el-form>
      
      <span slot="footer">
        <el-button @click="dialogVisible = false">取消</el-button>
        <el-button type="primary" @click="submitCategory" :loading="submitLoading">
          {{ isEdit ? '更新' : '创建' }}
        </el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
import api from '@/admin/api'

export default {
  name: 'CategoryManagement',
  data() {
    return {
      categoryTree: [],
      flatCategories: [],
      selectedCategory: null,
      dialogVisible: false,
      isEdit: false,
      submitLoading: false,
      
      categoryForm: {
        name: '',
        parent: null,
        description: '',
        order: 0,
        is_enabled: true
      },
      
      rules: {
        name: [
          { required: true, message: '请输入分类名称', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ]
      },
      
      treeProps: {
        children: 'children',
        label: 'name'
      },
      
      cascaderProps: {
        value: 'id',
        label: 'name',
        children: 'children',
        checkStrictly: true,
        emitPath: false
      }
    }
  },
  
  computed: {
    dialogTitle() {
      return this.isEdit ? '编辑分类' : '创建分类'
    },
    
    parentOptions() {
      // 编辑时，排除自己及子分类作为父级选项
      if (this.isEdit && this.categoryForm.id) {
        return this.filterParentOptions(this.categoryTree, this.categoryForm.id)
      }
      return this.categoryTree
    }
  },
  
  mounted() {
    this.getCategories()
  },
  
  methods: {
    // 获取分类列表
    async getCategories() {
      try {
        const res = await api.getChoiceQuestionCategories()
        this.flatCategories = res.data.data || []
        this.categoryTree = this.buildTree(this.flatCategories)
      } catch (err) {
        this.$error(err)
      }
    },
    
    // 构建树形结构
    buildTree(categories, parentId = null) {
      return categories
        .filter(cat => cat.parent === parentId)
        .map(cat => ({
          ...cat,
          children: this.buildTree(categories, cat.id)
        }))
        .sort((a, b) => a.order - b.order)
    },
    
    // 过滤父级选项（排除自己及子节点）
    filterParentOptions(tree, excludeId) {
      return tree.filter(node => {
        if (node.id === excludeId) return false
        if (node.children && node.children.length) {
          node.children = this.filterParentOptions(node.children, excludeId)
        }
        return true
      })
    },
    
    // 节点点击
    handleNodeClick(data) {
      this.selectedCategory = data
    },
    
    // 显示创建对话框
    showCreateDialog() {
      this.isEdit = false
      this.resetForm()
      this.dialogVisible = true
    },
    
    // 显示编辑对话框
    showEditDialog(category) {
      this.isEdit = true
      this.categoryForm = {
        id: category.id,
        name: category.name,
        parent: category.parent,
        description: category.description || '',
        order: category.order || 0,
        is_enabled: category.is_enabled !== false
      }
      this.dialogVisible = true
    },
    
    // 提交分类
    async submitCategory() {
      this.$refs.categoryForm.validate(async valid => {
        if (!valid) return
        
        this.submitLoading = true
        try {
          if (this.isEdit) {
            await api.updateChoiceQuestionCategory(this.categoryForm.id, this.categoryForm)
            this.$success('分类更新成功')
          } else {
            await api.createChoiceQuestionCategory(this.categoryForm)
            this.$success('分类创建成功')
          }
          this.dialogVisible = false
          this.getCategories()
        } catch (err) {
          this.$error(err)
        } finally {
          this.submitLoading = false
        }
      })
    },
    
    // 切换启用状态
    async toggleEnabled(category) {
      try {
        await api.updateChoiceQuestionCategory(category.id, {
          ...category,
          is_enabled: !category.is_enabled
        })
        this.$success(`分类已${category.is_enabled ? '禁用' : '启用'}`)
        this.getCategories()
      } catch (err) {
        this.$error(err)
      }
    },
    
    // 删除分类
    deleteCategory(category) {
      if (category.children && category.children.length > 0) {
        this.$warning('该分类包含子分类，请先删除子分类')
        return
      }
      
      if (category.question_count > 0) {
        this.$warning(`该分类下有 ${category.question_count} 道题目，请先处理题目`)
        return
      }
      
      this.$confirm(`确定删除分类 "${category.name}" 吗？`, '删除确认', {
        type: 'warning'
      }).then(async () => {
        try {
          await api.deleteChoiceQuestionCategory(category.id)
          this.$success('分类删除成功')
          this.getCategories()
          if (this.selectedCategory?.id === category.id) {
            this.selectedCategory = null
          }
        } catch (err) {
          this.$error(err)
        }
      })
    },
    
    // 节点拖拽
    handleNodeDrop(draggingNode, dropNode, dropType, ev) {
      // 更新节点的父级和排序
      const updateData = {
        id: draggingNode.data.id,
        parent: dropType === 'inner' ? dropNode.data.id : dropNode.data.parent,
        order: this.calculateOrder(draggingNode, dropNode, dropType)
      }
      
      this.updateCategoryOrder(updateData)
    },
    
    // 判断是否允许拖拽
    allowDrop(draggingNode, dropNode, type) {
      // 不能将父节点拖拽到其子节点
      if (dropNode.data.parent === draggingNode.data.id) {
        return false
      }
      return true
    },
    
    // 计算排序值
    calculateOrder(draggingNode, dropNode, dropType) {
      // 根据拖拽位置计算新的排序值
      if (dropType === 'before') {
        return dropNode.data.order - 1
      } else if (dropType === 'after') {
        return dropNode.data.order + 1
      } else {
        return 0
      }
    },
    
    // 更新分类排序
    async updateCategoryOrder(data) {
      try {
        await api.updateChoiceQuestionCategory(data.id, data)
        this.$success('分类排序已更新')
        this.getCategories()
      } catch (err) {
        this.$error(err)
        this.getCategories() // 失败后刷新恢复原状
      }
    },
    
    // 重置表单
    resetForm() {
      this.categoryForm = {
        name: '',
        parent: null,
        description: '',
        order: 0,
        is_enabled: true
      }
      this.$refs.categoryForm && this.$refs.categoryForm.clearValidate()
    },
    
    // 刷新分类
    refreshCategories() {
      this.getCategories()
      this.$success('分类列表已刷新')
    },
    
    // 获取父级名称
    getParentName(parentId) {
      if (!parentId) return null
      const parent = this.flatCategories.find(cat => cat.id === parentId)
      return parent ? parent.name : null
    },
    
    // 显示关联题目
    showRelatedQuestions() {
      this.$router.push({
        path: '/admin/choice-question',
        query: { category_id: this.selectedCategory.id }
      })
    }
  }
}
</script>

<style lang="less" scoped>
.category-management {
  .category-tree-container {
    min-height: 500px;
  }
  
  .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
    
    .node-label {
      display: flex;
      align-items: center;
      gap: 8px;
      
      i {
        color: #909399;
      }
    }
    
    .node-actions {
      display: none;
      gap: 5px;
    }
    
    &:hover .node-actions {
      display: inline-flex;
    }
  }
  
  .related-questions {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #EBEEF5;
    
    h4 {
      margin-bottom: 10px;
      color: #303133;
    }
  }
}
</style>