[
  {
    "id": "1",
    "type": "single",
    "question": "下面的描述中，( )正确定义一个名为Person的结构体并正确初始化了一个Person结构体的变量p。",
    "options": [
      "A. <pre><code>struct Person { string name; int age; }; Person p(\"Yang\", 10);</code></pre>",
      "B. <pre><code>struct Person { string name, int age; }; Person p; p.age = 10; p.name = \"Yang\";</code></pre>",
      "C. <pre><code>struct Person { string name; int age; }; Person p = { \"Yang\", 10 };</code></pre>",
      "D. <pre><code>struct Person { string name; int age; }; Person p = new Person(\"Yang\", 10);</code></pre>"
    ],
    "correct": "C",
    "explanation": "选项C正确定义了Person结构体，并使用初始化列表正确初始化了变量p。选项A错误，因为结构体不支持直接使用构造函数初始化（除非显式定义构造函数）。选项B错误，因为结构体成员定义时使用逗号分隔是错误语法。选项D错误，因为new返回的是指针类型，不能直接赋值给结构体变量。",
    "source": "CCF GESP 2025年3月认证 C++ 4级试题.pdf"
  },
  {
    "id": "2",
    "type": "single",
    "question": "给定如下代码，下面描述错误的是( )。<pre><code>struct Person {\n  std::string name;\n  int age;\n  struct Address {\n    std::string street;\n    std::string city;\n  } address;\n};</code></pre>",
    "options": [
      "A. 结构Person内嵌套结构Address",
      "B. Person有一个Address类型的address成员",
      "C. 一个Person类型的变量p的address的初始化可以写成:<pre><code>p.address.street = \"123 Main St\";\np.address.city = \"Anytown\";</code></pre>",
      "D. 结构的嵌套可以减少命名冲突，因此可以不必控制嵌套层次"
    ],
    "correct": "D",
    "explanation": "结构体嵌套虽可减少命名冲突，但嵌套层次过深会影响代码可读性与维护性，仍需合理控制。选项A、B、C均为结构体嵌套的正确用法。",
    "source": "CCF GESP 2025年3月认证 C++ 4级试题.pdf"
  },
  {
    "id": "3",
    "type": "single",
    "question": "在C++中，( )正确定义一个名为student的结构体，其中包含一个name字符数组和一个age整数？",
    "options": [
      "A. <pre><code>struct student { char name[20]; int age; };</code></pre>",
      "B. <pre><code>student struct { char name[20]; int age; };</code></pre>",
      "C. <pre><code>student struct { string name; int age; };</code></pre>",
      "D. <pre><code>struct student { char[20] name; int age; };</code></pre>"
    ],
    "correct": "A",
    "explanation": "选项A正确定义了结构体student，包含字符数组name和整数age。选项B和C的语法顺序错误。选项D的数组定义语法错误，应为char name[20]。",
    "source": "2024年9月认证 C++四级试题.pdf"
  },
  {
    "id": "4",
    "type": "single",
    "question": "在如下的C++代码执行后，设第11和12行的输出地址值分别为X和Y，则下面正确的是( )。\n<pre><code>1 struct pass { int no; char name[20]; int level; };\n2 int main() {\n3   struct pass XiaoYang;\n4   cout << \"&XiaoYang=\" << &XiaoYang << endl; // 第11行\n5   cout << \"&(XiaoYang.no)=\" << &(XiaoYang.no) << endl; // 第12行\n6 }</code></pre>",
    "options": [
      "A. X>Y",
      "B. X==Y",
      "C. X<Y",
      "D. 不确定"
    ],
    "correct": "B",
    "explanation": "结构体变量的地址即为其第一个成员的地址，因此&XiaoYang == &(XiaoYang.no)，即X等于Y。",
    "source": "2024年3月认证C++四级真题.pdf"
  },
  {
    "id": "5",
    "type": "truefalse",
    "question": "结构体的成员默认是public访问权限。( )",
    "options": [],
    "correct": "对",
    "explanation": "在C++中，结构体（struct）的成员默认是public，而类（class）的成员默认是private。因此该说法正确。",
    "source": "2023年9月GESPC++四级试卷解析.pdf"
  },
  {
    "id": "6",
    "type": "single",
    "question": "下列关于C++语言中结构体的叙述，正确的是( )。",
    "options": [
      "A. 结构体不能包含函数成员",
      "B. 结构体变量在内存中一定是连续存储的",
      "C. 结构体不能继承其他结构体",
      "D. 结构体不能作为函数参数"
    ],
    "correct": "B",
    "explanation": "选项B在多数情况下是正确的：结构体的各个成员通常在内存中连续排列。选项A错误，C++结构体可以包含函数成员。选项C错误，C++支持结构体继承。选项D错误，结构体可作为函数参数传递。",
    "source": "2023年6月GESP C++四级试题解析.pdf"
  },
  {
    "id": "7",
    "type": "single",
    "question": "下面C++代码中，结构体定义正确的是( )。",
    "options": [
      "A. <pre><code>struct book { string title; int page; }</code></pre>",
      "B. <pre><code>struct book { title: string; page: int; }</code></pre>",
      "C. <pre><code>struct book { string title; int page; };</code></pre>",
      "D. <pre><code>book struct { string title; int page; };</code></pre>"
    ],
    "correct": "C",
    "explanation": "选项C结构体定义语法完整，定义后以分号结尾。选项A缺少定义末尾分号。选项B成员定义语法错误。选项D语法顺序错误。",
    "source": "GESP C++四级样题卷.pdf"
  },
  {
    "id": "8",
    "type": "single",
    "question": "运行下面的C++代码，输出结果是( )。\n<pre><code>1 struct Point { int x, y; };\n2 int main() {\n3   struct Point p1 = {1, 2};\n4   struct Point p2 = {3, 4};\n5   p1 = p2;\n6   cout << p1.x << \",\" << p1.y << endl;\n7 }</code></pre>",
    "options": [
      "A. 1,2",
      "B. 3,4",
      "C. 2,1",
      "D. 4,3"
    ],
    "correct": "B",
    "explanation": "结构体变量之间可以直接赋值，赋值后p1与p2内容一致，即p1.x=3，p1.y=4，因此输出为3,4。",
    "source": "2024年6月GESP C++四级真题.pdf"
  },
  {
    "id": "9",
    "type": "truefalse",
    "question": "结构体变量可以作为函数的返回值。( )",
    "options": [],
    "correct": "对",
    "explanation": "在C++中，结构体变量既可以按值返回，也可以返回指向结构体的指针，因此该说法是正确的。",
    "source": "2023年6月GESP C++四级试题解析.pdf"
  },
  {
    "id": "10",
    "type": "single",
    "question": "下列代码中，能正确访问结构体成员的是( )。\n<pre><code>1 struct Student { string name; int age; };\n2 int main() {\n3   struct Student s = {\"Alice\", 18};\n4   // 此处访问成员\n5 }</code></pre>",
    "options": [
      "A. s->name",
      "B. s.name",
      "C. Student.name",
      "D. &s.name"
    ],
    "correct": "B",
    "explanation": "选项B是标准的通过结构体变量访问成员的语法。选项A用于结构体指针。选项C语法错误。选项D为取地址操作，不是访问成员本身。",
    "source": "2024年12月认证 C++四级真题.pdf"
  }
]
