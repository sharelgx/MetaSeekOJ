[
    {
      "id": "1",
      "type": "single",
      "question": "下列代码中，输出结果是( )<pre><code>\n#include<iostream>\nusing namespace std;\nint main(){\n    float a = 0.2f;\n    float b = 0.3f;\n    if ((b - a) == 0.1f) {\n        cout<<\"Equal\"<<endl;\n    }\n    else{\n        cout<<\"Not equal\"<<endl;\n    }\n}\n</code></pre>",
      "options": ["A. Equal", "B. Not equal", "C. 程序崩溃", "D. 编译错误"],
      "correct": "B",
      "explanation": "浮点数在计算机中以二进制小数表示时可能存在精度误差，0.3f - 0.2f 的结果并非精确等于 0.1f，因此条件判断为假，输出 Not equal。",
      "source": "模拟题"
    },
    {
      "id": "2",
      "type": "single",
      "question": "关于原码和补码的关系，下列说法正确的是( )",
      "options": [
        "A. 原码和补码的符号位一定相反",
        "B. 正数的原码与补码相同",
        "C. 负数的原码与补码相同",
        "D. 补码不能表示负数"
      ],
      "correct": "B",
      "explanation": "正数的原码、反码、补码表示形式一致，均为数值的二进制直接表示；负数的补码是原码符号位不变，其余位取反加1，因此A、C错误；补码可以表示负数，D错误。",
      "source": "模拟题"
    },
    {
      "id": "3",
      "type": "single",
      "question": "下列代码实现的功能是( )<pre><code>\nvoid Func(int &x) {\n    x = x ^ (1 << 3);\n}\n</code></pre>",
      "options": [
        "A. 将x的第3位（从0开始）取反",
        "B. 将x的第3位设置为1",
        "C. 将x的第3位设置为0",
        "D. 计算x与3的异或"
      ],
      "correct": "A",
      "explanation": "`1 << 3` 生成二进制数 `1000`，与x异或时，若x的第3位为1则变为0，为0则变为1，实现该位取反功能。",
      "source": "模拟题"
    },
    {
      "id": "4",
      "type": "single",
      "question": "a | (1 << 2) 运算的作用是( )",
      "options": [
        "A. 将a的第2位清零",
        "B. 将a的第2位设为1",
        "C. 将a的第2位取反",
        "D. 检查a的第2位是否为1"
      ],
      "correct": "B",
      "explanation": "`1 << 2` 得到二进制数 `100`，按位或运算会将a的第2位强制设置为1，其他位不变。",
      "source": "模拟题"
    },
    {
      "id": "5",
      "type": "single",
      "question": "下列程序中，result的输出结果是( )<pre><code>\nunsigned int a = 0xFFFFFFFF;\nint b = -1;\nint result = a & b;\ncout << result << endl;\n</code></pre>",
      "options": ["A. -1", "B. 0", "C. 255", "D. -256"],
      "correct": "A",
      "explanation": "无符号数0xFFFFFFFF（全1）与int类型-1（补码全1）按位与结果仍为全1，转换为int类型为-1。",
      "source": "模拟题"
    },
    {
      "id": "6",
      "type": "single",
      "question": "下面的程序执行后会( )<pre><code>\nint arr[5] = {1, 2, 3, 4, 5};\ncout << arr[5] << endl;\n</code></pre>",
      "options": [
        "A. 输出5",
        "B. 输出0",
        "C. 访问越界，结果不确定",
        "D. 编译报错"
      ],
      "correct": "C",
      "explanation": "数组下标范围为0~4，访问arr[5]属于越界操作，运行时会访问非法内存，结果不可预测，不会触发编译错误。",
      "source": "模拟题"
    },
    {
      "id": "7",
      "type": "single",
      "question": "下列程序输出的是( )<pre><code>\nstring str = \"Programming\"; \ncout << str.find(\"ram\") << '\\n';\n</code></pre>",
      "options": ["A. 2", "B. 3", "C. 4", "D. 5"],
      "correct": "C",
      "explanation": "字符串\"ram\"在\"Programming\"中的起始下标为4（P-r-o-g-r-a-m...），find函数返回首次出现的位置下标。",
      "source": "模拟题"
    },
    {
      "id": "8",
      "type": "single",
      "question": "下面C++代码执行后的输出是( )<pre><code>\nint sum = 0;\nfor(int i=1; i<=3; i++)\n    for(int j=1; j<=i; j++)\n        sum += i * j;\ncout << sum << endl;\n</code></pre>",
      "options": ["A. 14", "B. 18", "C. 25", "D. 20"],
      "correct": "C",
      "explanation": "计算过程如下：\ni=1: j=1 → sum += 1×1 = 1\n\ni=2: j=1,2 → sum += 2×1 + 2×2 = 2 + 4 = 6\n\ni=3: j=1,2,3 → sum += 3×1 + 3×2 + 3×3 = 3 + 6 + 9 = 18\n\ntotal sum = 1 + 6 + 18 = 25。",
      "source": "模拟题"
    }
  ]
  