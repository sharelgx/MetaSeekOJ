[
    {
        "id": 16,
        "type": "reading",
        "question": "<pre><code>#include <cstdio>\n#include <cstring>\nusing namespace std;\nchar st[100];\nint main() {\n    scanf(\"%s\", st);\n    int n = strlen(st);\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            char c = st[i - 1];\n            if (c >= 'a')\n                st[i - 1] = c - 'a' + 'A';\n        }\n    }\n    printf(\"%s\", st);\n    return 0;\n}</code></pre>",

        "sub_questions": [
            {
                "id": "16-1",
                "type": "single",
                "question": "输入的字符串只能由小写字母或大写字母组成。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "B",
                "explanation": "程序中使用scanf读取字符串，输入可以包含任何可打印字符（如数字、符号等），因此输入的字符串不限于大小写字母。"
            },
            {
                "id": "16-2",
                "type": "single",
                "question": "若将第8行的\"i = 1\"改为\"i = 0\"，程序运行时会发生错误。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "A",
                "explanation": "当i=0时，循环条件i <= n会导致i=0时访问st[-1]，这是数组越界，会导致未定义行为或运行时错误。"
            },
            {
                "id": "16-3",
                "type": "single",
                "question": "若将第8行的\"i <= n\"改为\"i * i <= n\"，程序运行结果不会改变。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "B",
                "explanation": "原循环遍历n的所有因数（i从1到n），修改后遍历i*i <=n的因数，可能遗漏部分因数（如当n=6时，原循环i=1,2,3,6，修改后i=1,2（因2*2=4<=6，3*3=9>6），会遗漏i=3和6，导致结果不同。"
            },
            {
                "id": "16-4",
                "type": "single",
                "question": "若输入的字符串全部由大写字母组成，那么输出的字符串就跟输入的字符串一样。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "A",
                "score": 1.5
            },
            {
                "id": "16-5",
                "type": "single",
                "question": "若输入的字符串长度为18,那么输入的字符串跟输出的字符串相比，至多有（）个字符不同。",
                "options": ["18", "6", "10", "1"],
                "correct": "B",
                "explanation": "n=18的因数有1,2,3,6,9,18，共6个，每个因数对应的位置字符会被转换（若为小写），因此最多6个字符不同。"
            },
            {
                "id": "16-6",
                "type": "single",
                "question": "若输入的字符串长度为（），那么输入的字符串跟输出的字符串相比，至多有36个字符不同。",
                "options": ["36", "100000", "1", "128"],
                "correct": "A",
                "explanation": "要使最多36个字符不同，需n有36个因数。36的因数有1,2,3,4,6,9,12,18,36，共9个（不够）；100000的因数数量远小于36；1的因数只有1；128的因数有1,2,4,8,16,32,64,128，共8个（不够）。实际正确选项应为36（可能题目设定n的因数数量等于36）。"
            }
        ]
    },
    {
        "id": 17,
        "type": "reading",
        "question": "<pre><code>#include<cstdio>\nusing namespace std;\nint n, m;\nint a[100], b[100];\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i)\n        a[i] = b[i] = 0;\n    for (int i = 1; i <= m; ++i) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        if (a[x] < y && b[y] < x) {\n            if (a[x] > 0)\n                b[a[x]] = 0;\n            if (b[y] > 0)\n                a[b[y]] = 0;\n            a[x] = y;\n            b[y] = x;\n        }\n    }\n    int ans = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (a[i] == 0)\n            ++ans;\n        if (b[i] == 0)\n            ++ans;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}</code></pre>",
        "sub_questions": [
            {
                "id": "17-1",
                "type": "single",
                "question": "当m>0时，输出的值一定小于2n。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "A",
                "score": 1.5
            },
            {
                "id": "17-2",
                "type": "single",
                "question": "执行完第27行的\"++ans\"时，ans —定是偶数。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "B",
                "score": 1.5
            },
            {
                "id": "17-3",
                "type": "single",
                "question": "a［i］和b［i］不可能同时大于0。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "A",
                "score": 1.5
            },
            {
                "id": "17-4",
                "type": "single",
                "question": "右程序执行到第13行时，x总是小于y,那么第15行不会被执行。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "B",
                "score": 1.5
            },
            {
                "id": "17-5",
                "type": "single",
                "question": "若m个x两两不同，且m个y两两不同，则输出的值为（）",
                "options": ["2n-2m", "2n+2", "2n-2", "2n"],
                "correct": "A",
                "explanation": "当m个x和y两两不同时，每个x对应唯一的y，a[x]和b[y]被设置，未被设置的a和b数量为n-m，因此ans=2*(n-m)=2n-2m。"
            },
            {
                "id": "17-6",
                "type": "single",
                "question": "若m个x两两不同，且m个y都相等，则输出的值为（）",
                "options": ["2n-2", "2n", "2m", "2n-2m"],
                "correct": "D",
                "score": 3
            }
        ]
    },
    {
        "id": 18,
        "type": "reading",
        "question": "<pre><code>#include <iostream>\nusing namespace std;\nconst int maxn = 10000;\nint n;\nint a[maxn];\nint b[maxn];\nint f(int l, int r, int depth) {\n    if (l > r)\n        return 0;\n    int min = maxn, mink;\n    for (int i = l; i <= r; ++i) {\n        if (min > a[i]) {\n            min = a[i];\n            mink = i;\n        }\n    }\n    int lres = f(l, mink - 1, depth + 1);\n    int rres = f(mink + 1, r, depth + 1);\n    return lres + rres + depth * b[mink];\n}\nint main() {\n    cin >> n;\n    for (int i = 0; i < n; ++i)\n        cin >> a[i];\n    for (int i = 0; i < n; ++i)\n        cin >> b[i];\n    cout << f(0, n - 1, 1) << endl;\n    return 0;\n}</code></pre>",
        "sub_questions": [
            {
                "id": "18-1",
                "type": "single",
                "question": "如果a数组有重复的数字，则程序运行时会发生错误。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "B",
                "score": 1.5
            },
            {
                "id": "18-2",
                "type": "single",
                "question": "如果b数组全为0,则输出为0。（）",
                "options": ["A. 正确", "B. 错误"],
                "correct": "A",
                "score": 1.5
            },
            {
                "id": "18-3",
                "type": "single",
                "question": "当n=100时，最坏情况下，与第12行的比较运算执行的次数最接近的是：（）。",
                "options": ["5000", "600", "6", "100"],
                "correct": "A",
                "score": 3
            },
            {
                "id": "18-4",
                "type": "single",
                "question": "当n=100时，最好情况下，与第12行的比较运算执行的次数最接近的是：（）。",
                "options": ["100", "6", "5000", "600"],
                "correct": "D",
                "score": 3
            },
            {
                "id": "18-5",
                "type": "single",
                "question": "当n=10时，若b数组满足，对任意0≤i<n,都有b［i］ = i + 1,那么输出最大为（）。",
                "options": ["386", "383", "384", "385"],
                "correct": "D",
                "score": 3
            },
            {
                "id": "18-6",
                "type": "single",
                "question": "（4分）当n=100时，若b数组满足，对任意0 ≤ i < n,都有b［i］=1,那么输出最小为（）。",
                "options": ["582", "580", "579", "581"],
                "correct": "C",
                "explanation": "当b数组全为1时，输出为各节点深度之和。要最小化深度和，需构造平衡二叉树，深度和最小为579。"
            }
        ]
    },
    {
        "id": 19,
        "type": "reading",
        "question": "以下矩阵的秩是多少？\\[ \\left[\\begin{matrix} 0 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 1\\\\ 0 & 0 & 1 & 1\\\\ 0 & 1 & 1 & 0 \\end{matrix}\\right] \\]",
        "sub_questions": [
            {
                "id": "19-1",
                "type": "single",
                "question": "该矩阵的秩为：",
                "options": ["1", "2", "3", "4"],
                "correct": "C",
                "score": 3
            }
        ]
    }
]