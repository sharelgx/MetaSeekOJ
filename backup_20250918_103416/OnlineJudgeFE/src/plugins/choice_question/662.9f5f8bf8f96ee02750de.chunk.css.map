{"version":3,"file":"662.9f5f8bf8f96ee02750de.chunk.css","mappings":";AAiTA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;AACA","sources":["webpack://ChoiceQuestionPlugin/./views/ChoiceQuestionList.vue"],"sourcesContent":["<template>\n  <div class=\"choice-question-list\">\n    <Panel shadow>\n      <div slot=\"title\">\n        <Icon type=\"ios-list\" />\n        选择题列表\n        <Badge :count=\"total\" style=\"margin-left: 10px\" />\n      </div>\n      \n      <!-- 筛选器 -->\n      <div class=\"filter-section\">\n        <Row :gutter=\"10\">\n          <Col :span=\"6\">\n            <Input \n              v-model=\"keyword\" \n              placeholder=\"搜索题目标题或内容\"\n              @on-enter=\"getQuestionList\"\n              clearable\n            >\n              <Icon type=\"ios-search\" slot=\"prefix\" />\n            </Input>\n          </Col>\n          <Col :span=\"4\">\n            <Select v-model=\"selectedCategory\" placeholder=\"选择分类\" clearable>\n              <Option \n                v-for=\"category in categories\" \n                :key=\"category.id\"\n                :value=\"category.id\"\n              >\n                {{ category.name }}\n              </Option>\n            </Select>\n          </Col>\n          <Col :span=\"4\">\n            <Select v-model=\"selectedTag\" placeholder=\"选择标签\" clearable>\n              <Option \n                v-for=\"tag in tags\" \n                :key=\"tag.id\"\n                :value=\"tag.id\"\n              >\n                <Tag :color=\"tag.color\">{{ tag.name }}</Tag>\n              </Option>\n            </Select>\n          </Col>\n          <Col :span=\"3\">\n            <Select v-model=\"selectedDifficulty\" placeholder=\"难度\" clearable>\n              <Option value=\"1\">简单</Option>\n              <Option value=\"2\">中等</Option>\n              <Option value=\"3\">困难</Option>\n            </Select>\n          </Col>\n          <Col :span=\"3\">\n            <Select v-model=\"selectedType\" placeholder=\"题型\" clearable>\n              <Option value=\"single\">单选题</Option>\n              <Option value=\"multiple\">多选题</Option>\n            </Select>\n          </Col>\n          <Col :span=\"4\">\n            <Button type=\"primary\" @click=\"getQuestionList\">搜索</Button>\n            <Button @click=\"resetFilter\" style=\"margin-left: 8px\">重置</Button>\n          </Col>\n        </Row>\n      </div>\n      \n      <!-- 题目列表 -->\n      <Table \n        :columns=\"columns\"\n        :data=\"questions\"\n        :loading=\"loading\"\n        @on-row-click=\"goToQuestion\"\n      />\n      \n      <!-- 分页 -->\n      <div class=\"pagination\">\n        <Page \n          :total=\"total\"\n          :page-size=\"pageSize\"\n          :current=\"currentPage\"\n          @on-change=\"handlePageChange\"\n          @on-page-size-change=\"handlePageSizeChange\"\n          show-sizer\n          show-elevator\n          show-total\n        />\n      </div>\n    </Panel>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { DIFFICULTY_CHOICES, QUESTION_TYPE_CHOICES } from '../constants'\n\nexport default {\n  name: 'ChoiceQuestionList',\n  data() {\n    return {\n      loading: false,\n      questions: [],\n      categories: [],\n      tags: [],\n      total: 0,\n      currentPage: 1,\n      pageSize: 20,\n      \n      // 筛选条件\n      keyword: '',\n      selectedCategory: null,\n      selectedTag: null,\n      selectedDifficulty: null,\n      selectedType: null,\n      \n      columns: [\n        {\n          title: 'ID',\n          key: '_id',\n          width: 80,\n          align: 'center'\n        },\n        {\n          title: '题目',\n          key: 'title',\n          minWidth: 200,\n          render: (h, params) => {\n            return h('div', [\n              h('div', {\n                style: {\n                  fontWeight: 'bold',\n                  marginBottom: '4px'\n                }\n              }, params.row.title),\n              h('div', {\n                style: {\n                  fontSize: '12px',\n                  color: '#999'\n                },\n                domProps: {\n                  innerHTML: params.row.content.substring(0, 100) + '...'\n                }\n              })\n            ])\n          }\n        },\n        {\n          title: '分类',\n          key: 'category',\n          width: 120,\n          render: (h, params) => {\n            return h('span', params.row.category ? params.row.category.name : '-')\n          }\n        },\n        {\n          title: '标签',\n          key: 'tags',\n          width: 150,\n          render: (h, params) => {\n            if (!params.row.tags || params.row.tags.length === 0) {\n              return h('span', '-')\n            }\n            return h('div', params.row.tags.map(tag => {\n              return h('Tag', {\n                props: {\n                  color: tag.color\n                },\n                style: {\n                  marginRight: '4px'\n                }\n              }, tag.name)\n            }))\n          }\n        },\n        {\n          title: '难度',\n          key: 'difficulty',\n          width: 80,\n          align: 'center',\n          render: (h, params) => {\n            const difficultyMap = {\n              1: { text: '简单', color: 'success' },\n              2: { text: '中等', color: 'warning' },\n              3: { text: '困难', color: 'error' }\n            }\n            const difficulty = difficultyMap[params.row.difficulty]\n            return h('Tag', {\n              props: {\n                color: difficulty.color\n              }\n            }, difficulty.text)\n          }\n        },\n        {\n          title: '题型',\n          key: 'question_type',\n          width: 80,\n          align: 'center',\n          render: (h, params) => {\n            return h('span', params.row.question_type === 'single' ? '单选' : '多选')\n          }\n        },\n        {\n          title: '分值',\n          key: 'score',\n          width: 80,\n          align: 'center'\n        },\n        {\n          title: '创建时间',\n          key: 'create_time',\n          width: 150,\n          render: (h, params) => {\n            return h('span', this.$moment(params.row.create_time).format('YYYY-MM-DD HH:mm'))\n          }\n        }\n      ]\n    }\n  },\n  \n  mounted() {\n    this.init()\n  },\n  \n  methods: {\n    async init() {\n      await Promise.all([\n        this.getCategoryList(),\n        this.getTagList(),\n        this.getQuestionList()\n      ])\n    },\n    \n    async getCategoryList() {\n      try {\n        const res = await api.getCategoryList()\n        this.categories = res.data.data\n      } catch (err) {\n        console.error('获取分类列表失败:', err)\n      }\n    },\n    \n    async getTagList() {\n      try {\n        const res = await api.getTagList()\n        this.tags = res.data.data\n      } catch (err) {\n        console.error('获取标签列表失败:', err)\n      }\n    },\n    \n    async getQuestionList() {\n      this.loading = true\n      try {\n        const params = {\n          offset: (this.currentPage - 1) * this.pageSize,\n          limit: this.pageSize\n        }\n        \n        if (this.keyword) params.keyword = this.keyword\n        if (this.selectedCategory) params.category = this.selectedCategory\n        if (this.selectedTag) params.tag = this.selectedTag\n        if (this.selectedDifficulty) params.difficulty = this.selectedDifficulty\n        if (this.selectedType) params.type = this.selectedType\n        \n        const res = await api.getQuestionList(params)\n        this.questions = res.data.data.results\n        this.total = res.data.data.total\n      } catch (err) {\n        this.$Message.error('获取题目列表失败')\n        console.error(err)\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    resetFilter() {\n      this.keyword = ''\n      this.selectedCategory = null\n      this.selectedTag = null\n      this.selectedDifficulty = null\n      this.selectedType = null\n      this.currentPage = 1\n      this.getQuestionList()\n    },\n    \n    handlePageChange(page) {\n      this.currentPage = page\n      this.getQuestionList()\n    },\n    \n    handlePageSizeChange(pageSize) {\n      this.pageSize = pageSize\n      this.currentPage = 1\n      this.getQuestionList()\n    },\n    \n    goToQuestion(row) {\n      this.$router.push({\n        name: 'choice-question-detail',\n        params: { id: row._id }\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.choice-question-list {\n  margin: 20px;\n}\n\n.filter-section {\n  margin-bottom: 20px;\n  padding: 16px;\n  background: #f8f8f9;\n  border-radius: 4px;\n}\n\n.pagination {\n  margin-top: 20px;\n  text-align: right;\n}\n</style>"],"names":[],"sourceRoot":""}